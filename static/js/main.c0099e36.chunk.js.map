{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","Fragment","this","props","author","name","email","concat","address","city","zipcode","street","Component","Comment","comments","body","CommentList","Comment_Comment","Post","data","title","User_User","users","CommentList_CommentList","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loaded","requested","items","filter","getItem","bind","assertThisInitialized","filterChanged","url","fetch","then","response","json","_this2","setState","Promise","all","loadUrl","_ref","_ref2","slicedToArray","posts","user","map","post","objectSpread","find","oneUser","id","userId","commentItem","postId","event","target","value","_this3","className","onClick","filteredPost","item","includes","Post_Post","key","type","onChange","placeholder","disabled","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0099e36.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class User extends Component {\r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <td>\r\n        {this.props.author.name}\r\n      </td>\r\n       <td>\r\n        {this.props.author.email}\r\n      </td>\r\n        <td>\r\n          {`${this.props.author.address.city}, ${this.props.author.address.zipcode}, ${this.props.author.address.street}`}\r\n      </td>\r\n    </React.Fragment>\r\n  );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Comment extends Component {\r\n  render() {\r\n    return (\r\n       <div>\r\n        <h3>{this.props.comments.name}</h3>\r\n        <p>{this.props.comments.body}</p>\r\n        <p>{this.props.comments.email}</p>\r\n      </div>\r\n   );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default class CommentList extends Component {\r\n  render() {\r\n    return (\r\n     <td>\r\n       <Comment comments={this.props.comments} />\r\n     </td>\r\n   );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\nexport default class Post extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{\r\n          this.props.data.title}\r\n        </td>\r\n        <td>{\r\n          this.props.data.body}\r\n        </td>\r\n        <User author={this.props.data.users} />\r\n        <CommentList comments={this.props.data.comments} />\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Post from './Post';\r\n\r\nclass PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false,\r\n      requested: false,\r\n      items: [],\r\n      filter: ''\r\n    }\r\n    this.getItem = this.getItem.bind(this);\r\n    this.filterChanged = this.filterChanged.bind(this);\r\n  }\r\n\r\n  loadUrl(url) {\r\n    return fetch(url)\r\n      .then(response => response.json()).then(response => response);\r\n  }\r\n\r\n  getItem() {\r\n    this.setState({\r\n      requested: true\r\n    })\r\n\r\n    Promise.all([\r\n      this.loadUrl('https://jsonplaceholder.typicode.com/posts'),\r\n      this.loadUrl('https://jsonplaceholder.typicode.com/users'),\r\n      this.loadUrl('https://jsonplaceholder.typicode.com/comments')\r\n    ]).then(([posts, user, comments]) => this.setState({\r\n      loaded: true,\r\n      items: posts.map((post) => ({\r\n        ...post,\r\n        users: user.find(oneUser => oneUser.id === post.userId),\r\n        comments: comments.find(commentItem => commentItem.postId === post.userId),\r\n\r\n      }))\r\n    }));\r\n  }\r\n \r\n  filterChanged(event) {\r\n   this.setState({\r\n    filter: event.target.value\r\n   });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <div> <button className='btn' onClick={this.getItem}>\r\n        {this.state.requested ? 'loading' : 'load data'}</button>\r\n      </div>\r\n    } else if (this.state.loaded) {\r\n      let filteredPost = [];\r\n       filteredPost = (<table>\r\n        <thead>\r\n          <tr>\r\n            <th>TITLE</th>\r\n            <th>POST BODY</th>\r\n            <th>AUTHOR NAME</th>\r\n            <th>AUTHOR EMAIL</th>\r\n            <th>AUTHOR ADRESS</th>\r\n            <th>POST COMMENTS</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n           {this.state.items.filter(item => (item.title.includes(this.state.filter) || item.body.includes(this.state.filter))).map(item => \r\n          <Post data={item}  key={item.title} />)}\r\n        </tbody>\r\n      </table>);\r\n      \r\n      return (\r\n        <div>\r\n          <input className='postSearcher' type='text' onChange={this.filterChanged} placeholder='Search the post'></input>\r\n        {filteredPost}\r\n        </div>\r\n        );\r\n    } else {\r\n\r\n    } return (\r\n      <div> <button className='btn' onClick={this.getItem} disabled>Loading....</button></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList; \r\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nfunction App() {\n  return (\n    <PostList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}